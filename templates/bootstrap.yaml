---
AWSTemplateFormatVersion: "2010-09-09"
Description: Bootstrap OIDC, VPC and clutser infrastructure
Parameters:
  GitHubOrganization:
    Type: String
    Description: This is the root organization or personal account where repos are stored (Case Sensitive)
  RepositoryName:
    Type: String
    Description: The repo(s) these roles will have access to. (Use * for all org or personal repos)
    Default: "*"
  BranchName:
    Type: String
    Description: Name of the git branch to to trust. (Use * for all branches)
    Default: "*"
  RoleName:
    Type: String
    Description: Name the Role
  UseExistingProvider:
    Type: String
    Description: "Only one GitHub Provider can exists. Choose yes if one is already present in account"
    Default: "no"
    AllowedValues:
      - "yes"
      - "no"
  ECRRepositoryName:
    Type: String
    Description: Name of the ECR repository
  AvailabilityZones:
    Description:
      List of Availability Zones to use for the subnets in the VPC. Three Availability Zones are used for this deployment, and the logical order of your selections is preserved.
    Type: List<AWS::EC2::AvailabilityZone::Name>
  ECSClusterName:
    Type: String
    Description: Name of the ECS cluster
  AppName:
    Type: String
    Description: Name of the application

Conditions:
  CreateProvider: !Equals ["no", !Ref UseExistingProvider]

Resources:
  IdpGitHubOidc:
    Type: AWS::IAM::OIDCProvider
    Condition: CreateProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
        - !Sub https://github.com/${GitHubOrganization}/${RepositoryName}
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1
      Tags:
        - Key: Name
          Value: !Sub ${RoleName}-OIDC-Provider

  RoleGithubActions:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !If
                - CreateProvider
                - !Ref IdpGitHubOidc
                - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GitHubOrganization}/${RepositoryName}:*:${BranchName}
      ManagedPolicyArns:
        ## edit the managed policy to give least privileges
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties: 
      EncryptionConfiguration: 
        EncryptionType: AES256
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Ref ECRRepositoryName

  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: 'https://aws-quickstart.s3.amazonaws.com/quickstart-aws-vpc/templates/aws-vpc.template.yaml'
      Parameters:
        AvailabilityZones: !Join [",", !Ref AvailabilityZones]
        NumberOfAZs: 3
        VPCCIDR: 10.0.0.0/16
        PrivateSubnet1ACIDR: 10.0.0.0/19
        PrivateSubnet2ACIDR: 10.0.32.0/19
        PrivateSubnet3ACIDR:  10.0.64.0/19
        PublicSubnet1CIDR: 10.0.128.0/20
        PublicSubnet2CIDR: 10.0.144.0/20
        PublicSubnet3CIDR: 10.0.160.0/20

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !GetAtt VPCStack.Outputs.VPCID
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !GetAtt VPCStack.Outputs.PublicSubnet1ID
        - !GetAtt VPCStack.Outputs.PublicSubnet2ID
        - !GetAtt VPCStack.Outputs.PublicSubnet3ID
      SecurityGroups: [!Ref 'PublicLoadBalancerSecurityGroup']

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref AppName
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !GetAtt VPCStack.Outputs.VPCID

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref LoadBalancerTargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values: 
            - "/"
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS containers
      VpcId: !GetAtt VPCStack.Outputs.VPCID

  ECSSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup

  ECSSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ECSSecurityGroup

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'
                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
      CapacityProviders: 
        - FARGATE
        - FARGATE_SPOT
      ClusterSettings: 
        - Name: containerInsights
          Value: enabled

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions: 
        - Essential: true
          Image: amazon/amazon-ecs-sample # placeholder container
          # Image: !Sub
          #   - '${RepoUri}:latest'
          #   - RepoUri: !GetAtt ECRRepository.RepositoryUri
          LogConfiguration: 
            LogDriver: awslogs
            Options: 
              awslogs-create-group: true
              awslogs-group: !Sub "/ecs/${AppName}-task-definition-family"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Name: !Ref ECRRepositoryName
          PortMappings: 
            - ContainerPort: 80
              HostPort: 80
              Protocol: "tcp"
      Family: !Sub "${AppName}-task-definition-family"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      NetworkMode: "awsvpc"
      RequiresCompatibilities: 
        - FARGATE
      Cpu: 1024
      Memory: 3072

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${AppName}-service"
      Cluster: !GetAtt ECSCluster.Arn
      LoadBalancers: 
        - TargetGroupArn: !Ref LoadBalancerTargetGroup
          ContainerName: !Ref AppName
          ContainerPort: 80
      LaunchType: FARGATE
      DesiredCount: 1
      PlatformVersion: LATEST
      TaskDefinition: !Ref ECSTaskDefinition
      DeploymentConfiguration: 
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker: 
          Enable: true
          Rollback: true
      HealthCheckGracePeriodSeconds: 0
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref ECSSecurityGroup
          Subnets: 
            - !GetAtt VPCStack.Outputs.PublicSubnet1ID
            - !GetAtt VPCStack.Outputs.PublicSubnet2ID
            - !GetAtt VPCStack.Outputs.PublicSubnet3ID

Outputs:
  IdpGitHubOidc:
    Condition: CreateProvider
    Description: "ARN of Github OIDC Provider"
    Value: !GetAtt IdpGitHubOidc.Arn

  RoleGithubActionsARN:
    Description: "CICD Role for GitHub Actions"
    Value: !GetAtt RoleGithubActions.Arn

  ECRRepository:
    Description: "ECR Repository Name"
    Value: !Ref ECRRepository

  ECSCluster:
    Description: "ECR Cluster Name"
    Value: !Ref ECSCluster
    
  ECSService:
    Description: "ECR Service Name"
    Value: !GetAtt ECSService.Name
    