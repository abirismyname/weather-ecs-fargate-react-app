on:
  workflow_dispatch:
  workflow_call:
    inputs:
      working-directory:
        required: false
        type: string
        default: '.'
      image-tag:
        required: true
        type: string
    outputs:
      app_url:
        description: "The ECS application URL"
        value: ${{ jobs.deploy.outputs.app_url }}
      app_ip:
        description: "The ECS application public ip"
        value: ${{ jobs.deploy.outputs.app_ip }}
name: cd

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      app_url: ${{ steps.set_app_url.outputs.app_url }}
      app_ip: ${{ steps.set_app_ip.outputs.app_ip }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}        

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
           --task-definition weather-app-task-definition-family \
           --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: weather-app
          image: "${{ steps.login-ecr.outputs.registry }}/weather-app:${{ inputs.image-tag }}"

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Set Task Public IP
        id: set_app_ip
        run: |
          TASK_ARN=$(aws ecs list-tasks --cluster ${{ secrets.ECS_CLUSTER }} --service-name ${{ secrets.ECS_SERVICE }} --query 'taskArns[0]' --output text)
          echo "TASK_ARN: ${TASK_ARN}"
          TASK_DETAILS=$(aws ecs describe-tasks --cluster ${{ secrets.ECS_CLUSTER }} --task "${TASK_ARN}" --query 'tasks[0].attachments[0].details')
          ENI=$(echo $TASK_DETAILS | jq -r '.[] | select(.name=="networkInterfaceId").value')
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids "${ENI}" --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          echo "app_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
      - name: GetApp URL
        id: set_app_url
        run: |
          TARGET_GROUP_ARN=$(aws ecs describe-services --service ${{ secrets.ECS_SERVICE }} --cluster ${{ secrets.ECS_CLUSTER }} --query 'services[0].loadBalancers[0].targetGroupArn' --output text) 
          LOAD_BALANCER_ARN=$(aws elbv2 describe-target-groups  --target-group-arns $TARGET_GROUP_ARN --query 'TargetGroups[0].LoadBalancerArns[0]' --output text)
          APP_URL=$(aws elbv2 describe-load-balancers --load-balancer-arns $LOAD_BALANCER_ARN --query 'LoadBalancers[0].DNSName' --output text)
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
